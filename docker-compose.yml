version: '3.9'
services:
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: mongoadmin
    #   MONGO_INITDB_ROOT_PASSWORD: mongoadmin
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: mydb
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysqldb_data:/var/lib/mysql
  postgres:
    image: postgres:11.16-alpine
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./postgresql/postgres.env
    volumes:
      - pgdb_data:/var/lib/postgresql/data
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgresql/database/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./localtime.buenos_aires:/etc/localtime.buenos_aires
      # - ./postgres/conf.d:/etc/postgresql/conf.d
    # entrypoint: tail -f /dev/null
    # environment:
    #   - POSTGRES_DB=mydb
    #   - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=postgres
    #   - PGDATA=/data/postgres
  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass redisadmin
    ports:
      - '6379:6379'
    environment:
     - REDIS_REPLICATION_MODE=master
    volumes: 
      - redisdb_data:/data
      # - $PWD/redis-data:/var/lib/redis
      # - $PWD/redis.conf:/usr/local/etc/redis/redis.conf
  elasticsearch:
    image: elasticsearch:7.9.2
    ports:
      - 9200:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # env_file:
    #   - ./elastic/elastic.env
    volumes:
      - esdb_data:/usr/share/elasticsearch/data
  kibana:
    image: kibana:7.9.2
    ports:
      - 5601:5601
  logstash:
    image: logstash:7.9.2
    volumes:
      - logstashdb_data:/usr/share/logstash/data/
      # - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      # - ./logstash/config/log4j2.properties:/usr/share/logstash/config/log4j2.properties
      # - ./logstash/pipeline:/usr/share/logstash/pipeline/
  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - 8081:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    # depends_on:
    #   - postgres  
  pga: 
    image: busybox:latest
    depends_on:
      - postgres
      - pgadmin
  elk:
    image: busybox:latest
    depends_on:
      - elasticsearch
      - kibana
      - logstash
  graphql-engine:
    image: hasura/graphql-engine:latest
    ports:
    - "7070:8080"
    depends_on:
    - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@postgres:5432/mydb
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"RS256", "key": "-----BEGIN PUBLIC KEY----- PUBLIC KEY-----END PUBLIC KEY-----\n", "claims_format": "stringified_json"}'
  nfs-server:
    image: itsthenetwork/nfs-server-alpine:12
    container_name: nfs-server
    restart: unless-stopped
    privileged: true
    command: "-N -n -v /var/nfs/store -e '*(rw,sync,fsid=0,no_subtree_check,no_root_squash)'"
    ports:
      - 2049:2049
    environment:
      - SHARED_DIRECTORY=/var/nfs/store
    volumes:
      - ./nfs-storage:/var/nfs/store
  sqlserver:
    image: mcr.microsoft.com/mssql/server
    container_name: sqlserver
    restart: always
    env_file:
      - ./sqlserver/sqlserver.env
      - ./sqlserver/sapassword.env
    ports:
      - '1433:1433'
    volumes:
      - sql-server-data:/var/opt/mssql/
      - sqldata:/var/opt/sqlserver/data
      - sqllog:/var/opt/sqlserver/log
      - sqlbackup:/var/opt/sqlserver/backup
      - /c/docker/shared:/usr/shared
  
networks:
  postgres:
    driver: bridge

volumes:
  mongodb_data:
  mysqldb_data:
  pgdb_data:
  redisdb_data:
  esdb_data:
  logstashdb_data:
  pgadmin_data:
  sql-server-data:
    driver: local
  sqldata:
  sqllog:
  sqlbackup:
